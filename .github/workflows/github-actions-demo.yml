---
name: Validate YAML Syntax
on: [pull_request]
jobs:
  get-changed-files:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.changed_files.outputs.changed_files}}
    steps:
      - run: |
          API_URL=$(jq --raw-output .pull_request._links.self.href "$GITHUB_EVENT_PATH")

          FILES=$(curl --request GET \
            --url "$API_URL/files?per_page=100" \
            --header "accept: application/vnd.github.v3+json" \
            --header "authorization: token ${{secrets.GITHUB_TOKEN}}")
          CHANGED_FILES=$(echo $FILES | jq '.[] | select(.status == "added" or .status == "modified") | .filename')
      - run: echo $CHANGED_FILES
      - id: changed_files
        run: echo "::set-output name=test::$CHANGED_FILES"
  yaml-lint:
    runs-on: ubuntu-latest
    needs: get-changed-files
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "This job's status is ${{ job.status }}."
      - run: echo ${{ needs.changed_files.outputs.changed_files }}
      - name: Lint YAML Files
        run: |
          for file in ${{ needs.changed_files.outputs.changed_files }}; do
            yamllint -d "{rules: {line-length: {max: 999}}}" -f github ${{ github.workspace }}/$file
          done
      # in the future hopefully we can lint all yaml files
      #      - name: Run yamllint
      #        uses: frenck/action-yamllint@v1
  nominatim-check:
    runs-on: ubuntu-latest
    steps:
      - name: Validate nominatim lookup
        run: |
          for file in ${{ steps.files.outputs.all }}; do
            if [[ $file == mirrors.d/* ]] ;
            then
              echo "Checking geolocation data against Nominatim for $file"
              COUNTRY=$(cat ${{ github.workspace }}/$file | shyaml get-value geolocation.country)
              STATE=$(cat ${{ github.workspace }}/$file | shyaml get-value geolocation.state_province)
              CITY=$(cat ${{ github.workspace }}/$file | shyaml get-value geolocation.city)
              NOMINATIM_LOOKUP=$(curl -s "https://nominatim.openstreetmap.org/search?city=$CITY&state=$STATE&country=$COUNTRY&format=json")
              MATCHES=$(echo $NOMINATIM_LOOKUP | jq length)
              echo $MATCHES
              if [[ "$MATCHES" == "0" ]]; then
                echo "$file contains invalid geolocation data"
                exit 1
              else
                echo "Valid geolocation data found for $file"
              fi
            fi
          done